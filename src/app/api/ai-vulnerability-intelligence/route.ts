import { NextRequest, NextResponse } from 'next/server'
import ZAI from 'z-ai-web-dev-sdk'

export async function POST(request: NextRequest) {
  try {
    const { vulnerabilityData, analysisType = 'assessment' } = await request.json()
    
    if (!vulnerabilityData) {
      return NextResponse.json(
        { error: 'Vulnerability data is required' },
        { status: 400 }
      )
    }

    let zai
    try {
      zai = await ZAI.create()
    } catch (configError) {
      console.warn('AI configuration not found, using fallback analysis')
      // Return fallback response
      return NextResponse.json({
        id: Date.now().toString(),
        timestamp: new Date().toISOString(),
        vulnerabilityId: vulnerabilityData.id,
        type: analysisType,
        assessment: `Vulnerability analysis: ${vulnerabilityData.severity || 'Unknown'} severity vulnerability detected. Immediate attention required for critical vulnerabilities affecting multiple sectors.`,
        impactScore: vulnerabilityData.severity === 'critical' ? 90 : vulnerabilityData.severity === 'high' ? 70 : 50,
        businessRisk: vulnerabilityData.severity === 'critical' ? 'very_high' : 'medium',
        recommendations: [
          'Immediate patching required',
          'Monitor affected systems',
          'Consider security vendor opportunities'
        ],
        confidence: 75,
        success: true,
        fallback: true
      })
    }

    let prompt = ''

    if (analysisType === 'assessment') {
      prompt = `You are an expert cybersecurity vulnerability analyst. Analyze the following vulnerability data and provide comprehensive assessment:

Vulnerability Details:
- Title: ${vulnerabilityData.title || 'Unknown'}
- Severity: ${vulnerabilityData.severity || 'Unknown'}
- Affected Companies: ${vulnerabilityData.affectedCompanies || 0}
- Description: ${vulnerabilityData.description || 'No description provided'}

Please provide:
1. Vulnerability impact assessment
2. Business risk analysis
3. Affected industries and companies
4. Mitigation recommendations
5. Investment implications (if any)
6. Market opportunities for security solutions
7. Timeline for resolution
8. Related vulnerabilities or patterns

Format your response as a JSON object with detailed vulnerability intelligence.`
    } else if (analysisType === 'threat-intelligence') {
      prompt = `You are a cybersecurity threat intelligence expert. Based on the following vulnerability, provide threat intelligence and predictive analysis:

Vulnerability: ${JSON.stringify(vulnerabilityData)}

Provide analysis on:
1. Threat actor exploitation likelihood
2. Potential attack vectors
3. Industries most at risk
4. Predicted timeline for attacks
5. Recommended defensive measures
6. Security solutions that can help
7. Market impact on security vendors
8. Investment opportunities in defensive technologies

Format your response as comprehensive threat intelligence.`
    }

    const completion = await zai.chat.completions.create({
      messages: [
        {
          role: 'system',
          content: 'You are an expert cybersecurity vulnerability analyst and threat intelligence specialist. Provide detailed, actionable security intelligence.'
        },
        {
          role: 'user',
          content: prompt
        }
      ],
      temperature: 0.3,
      max_tokens: 1500
    })

    const aiResponse = completion.choices[0]?.message?.content

    if (!aiResponse) {
      throw new Error('No response from AI')
    }

    let parsedResponse
    try {
      parsedResponse = JSON.parse(aiResponse)
    } catch (e) {
      parsedResponse = {
        assessment: aiResponse,
        confidence: 80,
        type: analysisType
      }
    }

    const response = {
      id: Date.now().toString(),
      timestamp: new Date().toISOString(),
      vulnerabilityId: vulnerabilityData.id,
      type: analysisType,
      ...parsedResponse,
      success: true
    }

    return NextResponse.json(response)
  } catch (error) {
    console.error('Error in AI vulnerability intelligence:', error)
    return NextResponse.json(
      { 
        error: 'Failed to perform vulnerability analysis',
        details: error.message,
        success: false 
      },
      { status: 500 }
    )
  }
}
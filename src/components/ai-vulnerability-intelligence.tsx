"use client"

import { useState } from 'react'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Textarea } from '@/components/ui/textarea'
import { Progress } from '@/components/ui/progress'
import { 
  AlertTriangle, 
  Brain, 
  Shield, 
  Target, 
  TrendingUp,
  CheckCircle,
  Clock,
  Zap,
  Eye,
  Sword
} from 'lucide-react'

interface VulnerabilityIntelligence {
  id: string
  vulnerabilityTitle: string
  severity: 'critical' | 'high' | 'medium' | 'low'
  threatAssessment: {
    exploitationLikelihood: 'imminent' | 'likely' | 'possible' | 'unlikely'
    attackVectors: string[]
    targetedIndustries: string[]
    predictedTimeline: string
  }
  businessImpact: {
    financialRisk: 'high' | 'medium' | 'low'
    operationalImpact: string[]
    complianceIssues: string[]
    reputationRisk: string
  }
  defensiveMeasures: {
    immediateActions: string[]
    recommendedTools: string[]
    longTermStrategies: string[]
  }
  marketOpportunities: {
    affectedVendors: string[]
    investmentOpportunities: string[]
    marketGrowthPotential: string
    timeline: string
  }
  confidence: number
  analysisType: 'assessment' | 'threat-intelligence'
  timestamp: string
}

interface AIVulnerabilityIntelligenceProps {
  vulnerabilityData?: {
    id: string
    title: string
    severity: 'critical' | 'high' | 'medium' | 'low'
    affectedCompanies: number
    description: string
  }
}

export default function AIVulnerabilityIntelligence({ vulnerabilityData }: AIVulnerabilityIntelligenceProps) {
  const [isAnalyzing, setIsAnalyzing] = useState(false)
  const [analysisProgress, setAnalysisProgress] = useState(0)
  const [intelligence, setIntelligence] = useState<VulnerabilityIntelligence | null>(null)
  const [customVulnerability, setCustomVulnerability] = useState('')
  const [analysisType, setAnalysisType] = useState<'assessment' | 'threat-intelligence'>('assessment')

  const analyzeVulnerability = async () => {
    const dataToAnalyze = vulnerabilityData || {
      id: Date.now().toString(),
      title: customVulnerability || 'Custom vulnerability analysis',
      severity: 'high' as const,
      affectedCompanies: 1,
      description: customVulnerability
    }

    setIsAnalyzing(true)
    setAnalysisProgress(0)
    
    try {
      const response = await fetch('/api/ai-vulnerability-intelligence', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          vulnerabilityData: dataToAnalyze,
          analysisType
        })
      })

      const result = await response.json()
      
      if (result.success) {
        // Transform AI response to our format
        const aiIntelligence: VulnerabilityIntelligence = {
          id: result.id,
          vulnerabilityTitle: dataToAnalyze.title,
          severity: dataToAnalyze.severity,
          threatAssessment: result.threatAssessment || {
            exploitationLikelihood: 'likely',
            attackVectors: result.attackVectors || ['Unknown'],
            targetedIndustries: result.targetedIndustries || ['Technology'],
            predictedTimeline: result.predictedTimeline || '30-60 days'
          },
          businessImpact: result.businessImpact || {
            financialRisk: 'medium',
            operationalImpact: result.operationalImpact || ['Service disruption'],
            complianceIssues: result.complianceIssues || ['Data protection'],
            reputationRisk: 'Moderate brand impact'
          },
          defensiveMeasures: result.defensiveMeasures || {
            immediateActions: result.immediateActions || ['Patch systems', 'Monitor logs'],
            recommendedTools: result.recommendedTools || ['EDR', 'SIEM'],
            longTermStrategies: result.longTermStrategies || ['Zero-trust implementation']
          },
          marketOpportunities: result.marketOpportunities || {
            affectedVendors: result.affectedVendors || ['Multiple vendors'],
            investmentOpportunities: result.investmentOpportunities || ['Security solutions'],
            marketGrowthPotential: result.marketGrowthPotential || 'High growth expected',
            timeline: result.timeline || '6-12 months'
          },
          confidence: result.confidence || 85,
          analysisType,
          timestamp: result.timestamp
        }
        
        setIntelligence(aiIntelligence)
      } else {
        // Fallback to mock data with progress simulation
        await simulateAnalysisProgress()
        setIntelligence(mockIntelligence)
      }
    } catch (error) {
      console.error('Error analyzing vulnerability:', error)
      // Fallback to mock data with progress simulation
      await simulateAnalysisProgress()
      setIntelligence(mockIntelligence)
    }
    
    setIsAnalyzing(false)
  }

  const simulateAnalysisProgress = async () => {
    const progressSteps = [
      { progress: 20, message: 'Analyzing vulnerability details...' },
      { progress: 40, message: 'Assessing threat landscape...' },
      { progress: 60, message: 'Evaluating business impact...' },
      { progress: 80, message: 'Generating defensive strategies...' },
      { progress: 100, message: 'Finalizing intelligence report...' }
    ]
    
    for (const step of progressSteps) {
      await new Promise(resolve => setTimeout(resolve, 500))
      setAnalysisProgress(step.progress)
    }
  }

  // Mock intelligence for fallback
  const mockIntelligence: VulnerabilityIntelligence = {
    id: Date.now().toString(),
    vulnerabilityTitle: vulnerabilityData?.title || customVulnerability || 'Sample Vulnerability',
    severity: vulnerabilityData?.severity || 'high',
    threatAssessment: {
      exploitationLikelihood: 'likely',
      attackVectors: ['Phishing', 'Exploit kits', 'Supply chain'],
      targetedIndustries: ['Finance', 'Healthcare', 'Technology'],
      predictedTimeline: '14-30 days'
    },
    businessImpact: {
      financialRisk: 'high',
      operationalImpact: ['Data breach', 'Service disruption', 'Compliance violations'],
      complianceIssues: ['GDPR', 'HIPAA', 'PCI-DSS'],
      reputationRisk: 'Severe brand damage and loss of customer trust'
    },
    defensiveMeasures: {
      immediateActions: ['Apply security patches', 'Enable MFA', 'Monitor network traffic'],
      recommendedTools: ['EDR solutions', 'SIEM systems', 'Email security gateways'],
      longTermStrategies: ['Zero-trust architecture', 'Security awareness training', 'Regular penetration testing']
    },
    marketOpportunities: {
      affectedVendors: ['Cloud providers', 'Security software vendors', 'Managed service providers'],
      investmentOpportunities: ['Automated response platforms', 'Threat intelligence services', 'Compliance automation tools'],
      marketGrowthPotential: '35% CAGR expected in defensive solutions',
      timeline: '6-18 months'
    },
    confidence: 88,
    analysisType,
    timestamp: new Date().toISOString()
  }

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical': return 'text-red-600 bg-red-50'
      case 'high': return 'text-orange-600 bg-orange-50'
      case 'medium': return 'text-yellow-600 bg-yellow-50'
      case 'low': return 'text-green-600 bg-green-50'
      default: return 'text-gray-600 bg-gray-50'
    }
  }

  const getThreatLevelColor = (likelihood: string) => {
    switch (likelihood) {
      case 'imminent': return 'text-red-600'
      case 'likely': return 'text-orange-600'
      case 'possible': return 'text-yellow-600'
      case 'unlikely': return 'text-green-600'
      default: return 'text-gray-600'
    }
  }

  return (
    <Card className="shadow-sm">
      <CardHeader className="pb-4">
        <CardTitle className="flex items-center gap-2">
          <Brain className="h-5 w-5 text-red-600" />
          AI Vulnerability Intelligence
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        {/* Vulnerability Input */}
        {!vulnerabilityData && (
          <div className="space-y-3">
            <Textarea
              placeholder="Describe vulnerability or paste vulnerability details..."
              value={customVulnerability}
              onChange={(e) => setCustomVulnerability(e.target.value)}
              className="min-h-[80px]"
            />
            <div className="flex gap-2">
              <Button
                variant={analysisType === 'assessment' ? 'default' : 'outline'}
                size="sm"
                onClick={() => setAnalysisType('assessment')}
              >
                <Shield className="h-4 w-4 mr-1" />
                Assessment
              </Button>
              <Button
                variant={analysisType === 'threat-intelligence' ? 'default' : 'outline'}
                size="sm"
                onClick={() => setAnalysisType('threat-intelligence')}
              >
                <Eye className="h-4 w-4 mr-1" />
                Threat Intel
              </Button>
            </div>
          </div>
        )}

        {/* Analyze Button */}
        <Button 
          onClick={analyzeVulnerability}
          disabled={(!vulnerabilityData && !customVulnerability.trim()) || isAnalyzing}
          className="w-full"
        >
          {isAnalyzing ? (
            <>
              <Clock className="mr-2 h-4 w-4 animate-spin" />
              Analyzing...
            </>
          ) : (
            <>
              <Zap className="mr-2 h-4 w-4" />
              Analyze Vulnerability
            </>
          )}
        </Button>

        {/* Analysis Progress */}
        {isAnalyzing && (
          <div className="space-y-2">
            <Progress value={analysisProgress} className="w-full" />
            <p className="text-sm text-muted-foreground text-center">
              {analysisProgress === 20 && 'Analyzing vulnerability details...'}
              {analysisProgress === 40 && 'Assessing threat landscape...'}
              {analysisProgress === 60 && 'Evaluating business impact...'}
              {analysisProgress === 80 && 'Generating defensive strategies...'}
              {analysisProgress === 100 && 'Finalizing intelligence report...'}
            </p>
          </div>
        )}

        {/* Intelligence Results */}
        {intelligence && (
          <div className="space-y-4">
            {/* Vulnerability Header */}
            <div className="flex items-center justify-between p-3 border rounded-lg">
              <div>
                <h4 className="font-semibold">{intelligence.vulnerabilityTitle}</h4>
                <div className="flex items-center gap-2 mt-1">
                  <Badge className={getSeverityColor(intelligence.severity)}>
                    {intelligence.severity.toUpperCase()}
                  </Badge>
                  <Badge variant="outline">
                    {intelligence.confidence}% confidence
                  </Badge>
                </div>
              </div>
              <div className="text-right">
                <p className="text-xs text-muted-foreground">
                  {new Date(intelligence.timestamp).toLocaleString()}
                </p>
              </div>
            </div>

            {/* Threat Assessment */}
            <div className="space-y-2">
              <h5 className="font-medium text-sm flex items-center gap-2">
                <AlertTriangle className="h-4 w-4 text-orange-600" />
                Threat Assessment
              </h5>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                <div className="p-3 border rounded-lg">
                  <p className="text-xs text-muted-foreground">Exploitation Likelihood</p>
                  <p className={`font-medium ${getThreatLevelColor(intelligence.threatAssessment.exploitationLikelihood)}`}>
                    {intelligence.threatAssessment.exploitationLikelihood.charAt(0).toUpperCase() + intelligence.threatAssessment.exploitationLikelihood.slice(1)}
                  </p>
                </div>
                <div className="p-3 border rounded-lg">
                  <p className="text-xs text-muted-foreground">Predicted Timeline</p>
                  <p className="font-medium">{intelligence.threatAssessment.predictedTimeline}</p>
                </div>
              </div>
              
              <div className="space-y-1">
                <p className="text-xs text-muted-foreground">Attack Vectors</p>
                <div className="flex flex-wrap gap-1">
                  {intelligence.threatAssessment.attackVectors.map((vector, index) => (
                    <Badge key={index} variant="outline" className="text-xs">
                      {vector}
                    </Badge>
                  ))}
                </div>
              </div>
              
              <div className="space-y-1">
                <p className="text-xs text-muted-foreground">Targeted Industries</p>
                <div className="flex flex-wrap gap-1">
                  {intelligence.threatAssessment.targetedIndustries.map((industry, index) => (
                    <Badge key={index} variant="secondary" className="text-xs">
                      {industry}
                    </Badge>
                  ))}
                </div>
              </div>
            </div>

            {/* Business Impact */}
            <div className="space-y-2">
              <h5 className="font-medium text-sm flex items-center gap-2">
                <TrendingUp className="h-4 w-4 text-red-600" />
                Business Impact
              </h5>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                <div className="p-3 border rounded-lg">
                  <p className="text-xs text-muted-foreground">Financial Risk</p>
                  <p className="font-medium capitalize">{intelligence.businessImpact.financialRisk}</p>
                </div>
                <div className="p-3 border rounded-lg">
                  <p className="text-xs text-muted-foreground">Reputation Risk</p>
                  <p className="font-medium">{intelligence.businessImpact.reputationRisk}</p>
                </div>
              </div>
              
              <div className="space-y-1">
                <p className="text-xs text-muted-foreground">Operational Impact</p>
                <ul className="text-sm space-y-1">
                  {intelligence.businessImpact.operationalImpact.map((impact, index) => (
                    <li key={index} className="flex items-start gap-2">
                      <span className="text-red-600 mt-1">•</span>
                      {impact}
                    </li>
                  ))}
                </ul>
              </div>
            </div>

            {/* Defensive Measures */}
            <div className="space-y-2">
              <h5 className="font-medium text-sm flex items-center gap-2">
                <Shield className="h-4 w-4 text-green-600" />
                Defensive Measures
              </h5>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-3">
                <div>
                  <p className="text-xs text-muted-foreground mb-1">Immediate Actions</p>
                  <ul className="text-sm space-y-1">
                    {intelligence.defensiveMeasures.immediateActions.slice(0, 3).map((action, index) => (
                      <li key={index} className="flex items-start gap-2">
                        <CheckCircle className="h-3 w-3 text-green-600 mt-0.5 flex-shrink-0" />
                        <span className="text-xs">{action}</span>
                      </li>
                    ))}
                  </ul>
                </div>
                <div>
                  <p className="text-xs text-muted-foreground mb-1">Recommended Tools</p>
                  <div className="flex flex-wrap gap-1">
                    {intelligence.defensiveMeasures.recommendedTools.slice(0, 3).map((tool, index) => (
                      <Badge key={index} variant="outline" className="text-xs">
                        {tool}
                      </Badge>
                    ))}
                  </div>
                </div>
                <div>
                  <p className="text-xs text-muted-foreground mb-1">Long-term Strategy</p>
                  <ul className="text-sm space-y-1">
                    {intelligence.defensiveMeasures.longTermStrategies.slice(0, 2).map((strategy, index) => (
                      <li key={index} className="flex items-start gap-2">
                        <Target className="h-3 w-3 text-blue-600 mt-0.5 flex-shrink-0" />
                        <span className="text-xs">{strategy}</span>
                      </li>
                    ))}
                  </ul>
                </div>
              </div>
            </div>

            {/* Market Opportunities */}
            <div className="space-y-2">
              <h5 className="font-medium text-sm flex items-center gap-2">
                <Sword className="h-4 w-4 text-purple-600" />
                Market Opportunities
              </h5>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                <div className="p-3 border rounded-lg">
                  <p className="text-xs text-muted-foreground">Growth Potential</p>
                  <p className="font-medium">{intelligence.marketOpportunities.marketGrowthPotential}</p>
                </div>
                <div className="p-3 border rounded-lg">
                  <p className="text-xs text-muted-foreground">Timeline</p>
                  <p className="font-medium">{intelligence.marketOpportunities.timeline}</p>
                </div>
              </div>
              
              <div className="space-y-1">
                <p className="text-xs text-muted-foreground">Investment Opportunities</p>
                <div className="flex flex-wrap gap-1">
                  {intelligence.marketOpportunities.investmentOpportunities.map((opportunity, index) => (
                    <Badge key={index} variant="secondary" className="text-xs">
                      {opportunity}
                    </Badge>
                  ))}
                </div>
              </div>
            </div>
          </div>
        )}
      </CardContent>
    </Card>
  )
}